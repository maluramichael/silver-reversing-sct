._DATA
test	0	
test2	0	
VAR_0	0	
chronicler_char_ref	0	
chronicler_dialog	0	
VAR_3	0	
VAR_4	0	
VAR_5	"DVDCHR"	
VAR_6	"NULL"	
VAR_7	"SEKCHR"	
VAR_8	"NULL"	
VAR_9	"CAGCHR"	
VAR_10	"NULL"	
VAR_11	"JUGCHR"	
VAR_12	"NULL"	
VAR_13	"CHICHR"	
VAR_14	"NULL"	
VAR_15	"VIVCHR"	
VAR_16	"NULL"	
VAR_17	0	
VAR_18	{ 0, 0, -1 }	
VAR_19	0	
VAR_20	0	
VAR_21	0	
VAR_22	0	
VAR_23	-1	
VAR_24	"game saved"	
VAR_25	"game not saved"	
selected_char	0	
VAR_27	"DVDCHR"	
VAR_28	"NULL"	
VAR_29	"SEKCHR"	
VAR_30	"NULL"	
VAR_31	"CAGCHR"	
VAR_32	"NULL"	
VAR_33	"JUGCHR"	
VAR_34	"NULL"	
VAR_35	"CHICHR"	
VAR_36	"NULL"	
VAR_37	"VIVCHR"	
VAR_38	"NULL"	
rain_sfx_initialized	0	
VAR_40	0	
VAR_41	0	
VAR_42	0	
VAR_43	0	
VAR_44	0	
VAR_45	0	
VAR_46	0	
VAR_47	"random_rain_fx: Rain SFX not initialised! See Marc"	
VAR_48	0	
VAR_49	0	
VAR_50	0	
VAR_51	0	
VAR_52	0	
VAR_53	0	
VAR_54	0	
VAR_55	0	
VAR_56	{ 0, 0 }	
play_gate_open_animation	0	
VAR_58	{ 0, 0 }	
portcullis_sound_ref	0	
VAR_60	0	
door_close_sound_ref	0	
VAR_62	0	
VAR_63	0	
VAR_64	"RAINPT1"	
VAR_65	"stop playing the portcullis sound"	
code_cracked	0	
VAR_67	"it's_raining"	
VAR_68	{ -1100, 1270, 1250 }	
VAR_69	{ 1900, 1270, -1475 }	
VAR_70	"RAIN"	
VAR_71	"torch"	
is_bell_ring_animation_played	0	
bell_anim_frame	0
VAR_74	"bellring"	
pwd_ring_parts	{ 3, 2, 1 }	
nod_animation	0	
VAR_78	{ -1000882176, -1004978176, -1018298368 }	
is_code_given	1
VAR_80	"yes"	
VAR_81	"gateopen"	
VAR_82	"chronicl"	
VAR_83	"rain"	
VAR_84	"tavern01"	
VAR_85	"given bell code"	
VAR_86	"no bell code"	
password_phase	0	
num_of_rings_made	0	
current_pwd_part	0	
should_pause	0	
ringed_once	0	
near_bell_position	{ -693, -1039, -230 }	
selected_hero	0	
VAR_94	{ -584, -1039, 758 }	
VAR_95	-1	
VAR_96	"walked to bell"	
VAR_97	"*"
VAR_98	"code timeout"	
VAR_99	"code timeout"	
VAR_100	"."	
VAR_101	"right..."
VAR_102	"pause timeout 1"	
VAR_103	"pause timeout 2"	
VAR_104	"wrong pause..."	
VAR_105	"cracked the code!!"	
bell_step	0	
VAR_107	"walked to bell"

._main
	execute make_it_rain
	call load_sound(int 1)
	execute animate_gate_torch
	execute init_bell_ring_animation
	execute get_chronicler_if_he_already_exist

	// play rain's theme
	call play_bgm(var &VAR_64)

	if(gamevar is_room_cleared) {
			execute do_nothing
	} else {
			switch(gamevar room_state) {
					case 1
						execute check_if_code_was_given
						break 
					case 2
						execute do_nothing
						break 
					case 20
						execute do_nothing
						break 
					case 0
						break 
			}
	}

._main_loop
	var VAR_0 = int 20
	execute handle_chronicler

	execute play_lightning_thunder_effects

	if(gamevar !is_room_cleared) {
			switch(gamevar room_state) {
					case 1
						execute check_bell_interaction
						break 
					case 2
						execute check_bell_click
						break 
					case 20
						execute check_bell_click
						break 
					case 0
						break 
			}
	}
	if(var VAR_62) {
			var VAR_63 = var VAR_58
			if(var VAR_63 == int 88) {
					var VAR_62 = int 0
					
					// stop playing portcullis
					call func_125(var portcullis_sound_ref)
					call func_cd(var &VAR_65)
					
					// play door close sound ("DoorCls3")
					var door_close_sound_ref = call play_loaded_sound(int 3, int 0, int 51, int 0)
					call func_11c(var door_close_sound_ref, int 40)
			}
	}

._on_exit
	execute get_chronicler_if_he_exists
	if(gamevar !is_room_cleared) {
			switch(gamevar room_state) {
					case 1
						if(var code_cracked) {
								gamevar room_state ++ 
						}
						break 
					case 2
						break 
					case 20
						gamevar room_state = int 2
						break 
					case 0
						break 
					default 
						gamevar room_state = int 0
						break 
			}
	}

._make_it_rain
	call func_cd(var &VAR_67)
	call func_f4(var &VAR_70, var &VAR_68, var &VAR_69, int 0)
	execute create_rain_fx

._animate_gate_torch
	gamevar SMACKER_X = int 248
	gamevar SMACKER_Y = int 224

	// play torch animation next to the gate
	call func_a0(var &VAR_71, int 1, int 1, int 0)

._lock_gate_door
	gamevar *scene_info_p+4 &= int -3

._open_gate_door
	gamevar *scene_info_p+4 |= int 2

._check_bell_interaction
	if(var is_code_given) {
			if(var code_cracked == int 0) {
					// Lock the door
					execute lock_gate_door
					// Check password
					execute check_password
			}
			else {
					execute check_bell_click
			}
	} else {
		execute lock_gate_door
		execute check_bell_click
	}

._check_if_code_was_given
	var nod_animation = call load_anim(var &VAR_80)
	gamevar SMACKER_X = int 264
	gamevar SMACKER_Y = int 192
	call func_a0(var &VAR_81, int 0, int 1, var &play_gate_open_animation)
	call func_bc(var &VAR_82)

	// check tavern memory
	if(call func_c0(int 999, var &VAR_83, var &VAR_84)) {
			call func_cd(var &VAR_85) // "given bell code"	
			var is_code_given = int 1
	} else {
			call func_cd(var &VAR_86) // "no bell code"	
	}

._check_password
	// check if it's the first ring since entering the room
	if(var VAR_95 != var password_phase)
	{
			var VAR_95 = var password_phase
			call func_ce(var password_phase)
	}

	// phase 0 checks if the selected char is not near bell, it will walk there and ring
	if(var password_phase == int 0) {
			// if bell is not ringing and character is far from it
			if(gamevar global_zone_type == int 18) {
					var selected_hero = call func_72()
					if(call is_char_at_pos(var selected_hero, var &near_bell_position, int 160)) {
							var num_of_rings_made = int 1
							var current_pwd_part = int 0
							var should_pause = int 0
							var is_bell_ring_animation_played = int 1
							var password_phase = int 2

							// reset timer
							call func_d5()
					} else {
							call char_walk_to_pos(var selected_hero, var &near_bell_position)
							var password_phase ++ 
					}
					gamevar global_zone_type = int 0
			}
	}

	// phase 1 makes the first ring if the selected char is near the bell
	if(var password_phase == int 1) {
			if(call is_char_standing(var selected_hero)) {
					if(call is_char_at_pos(var selected_hero, var &near_bell_position, int 160)) {
							call func_cd(var &VAR_96) // "walked to bell"
							var num_of_rings_made = int 1
							var current_pwd_part = int 0
							var should_pause = int 0
							var is_bell_ring_animation_played = int 1
							var password_phase ++ 
							
							// reset timer
							call func_d5()
					} else {
							var password_phase = int 0
					}
			}
	}

	// phase 2 is the actual password check
	if(var password_phase == int 2) {
			if(var should_pause == int 0) {
					// if ringing animation is stopped playing 
					if(var is_bell_ring_animation_played == int 0) {
							call func_cd(var &VAR_97) // "*"

							// check if this part of the password is correct
							if(var num_of_rings_made == @pwd_ring_parts[var current_pwd_part]) {
									var current_pwd_part ++ 
									var num_of_rings_made = int 0
									// reset timer
									call func_d5()
									var should_pause = int 1
									gamevar global_zone_type = int 0
									call play_char_anim(var selected_hero, var nod_animation, int 0)

									// if we made it past part 3 we're done
									if(var current_pwd_part == int 3)
									{
											var password_phase = int 5
									}
							}

							// ring the bell was clicked for another ring
							if(gamevar global_zone_type == int 18) {
									var num_of_rings_made ++ 
									// reset timer
									call func_d5()
									gamevar global_zone_type = int 0
									var is_bell_ring_animation_played = int 1
							}

							// check for code timeout
							if(call func_129(int 9)) {
									if(var is_bell_ring_animation_played == int 1 && var bell_anim_frame == int 15) {
											call func_cd(var &VAR_98) // "code timeout"
											var password_phase = int 0
											// reset timer
											call func_d5()
											var is_bell_ring_animation_played = int 0
									}
									if(var is_bell_ring_animation_played == int 0) {
											call func_cd(var &VAR_99) // "code timeout"
											var password_phase = int 0
                                            // reset timer
											call func_d5()
									}
							}
					} else {
						// if ringing animation is still playing, stop after it ends
							if(var bell_anim_frame == int 1 && var ringed_once) {
                                    // reset timer
									call func_d5()
									var is_bell_ring_animation_played = int 0
									gamevar global_zone_type = int 0
									var ringed_once = int 0
							}
							if(var bell_anim_frame == int 15) {
									var ringed_once = int 1
							}
					}
			} else {
				// check the pause between the password parts
					if(call func_12a(int 10, int 18)) {
							call func_cd(var &VAR_100) // "."
					}

					// if the bell was queued to ring (in a row)
					if(gamevar global_zone_type == int 18) {
							gamevar global_zone_type = int 0
							var is_bell_ring_animation_played = int 1

							// if its within the time frame the pause was right
							if(call func_12a(int 8, int 48)) {
								call func_cd(var &VAR_101) // "right..."
								var num_of_rings_made = int 1
                                // reset timer
								call func_d5()
								var should_pause = int 0
							} else {
								// the pause was wrong
								var password_phase = int 3
							}
					}

					// check for pause timout
					if(call func_129(int 48)) {
							// if the ring animation ended
							if(var is_bell_ring_animation_played == int 0) {
									call func_cd(var &VAR_102)  // "pause timeout 1"
									var password_phase = int 0
                                    // reset timer
									call func_d5()
									var is_bell_ring_animation_played = int 0
							}
							// if the ring animation already started the next ring
							if(var is_bell_ring_animation_played == int 1 && var bell_anim_frame == int 1) {
									call func_cd(var &VAR_103) // "pause timeout 2"
									var password_phase = int 0
                                    // reset timer
									call func_d5()
									var is_bell_ring_animation_played = int 0
							}
					}
			}
	}

	// phase 3 means the pause was not right, when the anim ends we move to 4
	if(var password_phase == int 3) {
			if(var is_bell_ring_animation_played == int 1 && var bell_anim_frame == int 15) {
					call func_cd(var &VAR_104) // "wrong pause"
					var password_phase ++ 
                    // reset timer
					call func_d5()
			}
	}

	// phase 4 - if this is true the pause was wrong so we start form the beginning
	if(var password_phase == int 4) {
			if(var is_bell_ring_animation_played == int 1 && var bell_anim_frame == int 1) {
					var password_phase = int 0
                    // reset timer
					call func_d5()
					var is_bell_ring_animation_played = int 0
			}
	}

	// if this is true, the code is cracked
	if(var password_phase == int 5) {
			call func_cd(var &VAR_105)  // "cracked the code!!!"

			var code_cracked = int 1
			gamevar *scene_info_p+1 = int 1

			// create the chronicler
			var chronicler_char_ref = call create_enemy(int 178, int 0, var &VAR_94, int 140)
			if(call ! func_bf(int 0, gamevar CURRENT_LEVEL, gamevar CURRENT_SCENE))
			{
					call func_7(int 0, int 1, int 1, int 1)
			}
			var play_gate_open_animation = int 1
			
			// play door open sound ("Dooropn2")
			var VAR_60 = call play_loaded_sound(int 1, int 0, int 1, int 0)
			call func_11c(var VAR_60, int 40)

			// play "DrawBr2" sound (portcullis)
			var portcullis_sound_ref = call play_loaded_sound(int 2, int -1, int 51, int 0)

			if(var portcullis_sound_ref != int -1)
			{
					call func_fb(var portcullis_sound_ref, int 29050)
					call func_11c(var portcullis_sound_ref, int 50)
			}
			call func_40(int 1, int 4, int 0, int 100)
			var VAR_62 = int 1
			execute open_gate_door
			var password_phase ++ 
	}

	// play the bell ringing sound when the hammer hits the bell (frame 15)
	if(var is_bell_ring_animation_played == int 1 && var bell_anim_frame == int 15) {
			// play bell sound ("bell")
			call play_loaded_sound(int 1, int 0, int 14, var &VAR_78)
	}

._check_bell_click
	// first bell step, if character is next to it move to step 3, otherwise bring char near it
	if(var bell_step == int 0) {
			// if bell is clicked
			if(gamevar global_zone_type == int 18) {
					var selected_hero = call func_72()
					// if selected character near bell, ring
					if(call is_char_at_pos(var selected_hero, var &near_bell_position, int 160)) {
							var is_bell_ring_animation_played = int 1
							var bell_step = int 2
					} else {
						// if selected char is not near bell, walk to bell
							call char_walk_to_pos(var selected_hero, var &near_bell_position)
							var password_phase ++ 
					}
					gamevar global_zone_type = int 0
			}
	}

	// second bell step, ring it when the selected character is near
	if(var bell_step == int 1) {
			if(call is_char_standing(var selected_hero)) {
					if(call is_char_at_pos(var selected_hero, var &near_bell_position, int 160)) {
							call func_cd(var &VAR_107)  // "walked to bell"
							var is_bell_ring_animation_played = int 1
							var bell_step ++ 
					} else {
							var bell_step = int 0
					}
			}
	}

	// when bell animation end, move to ending step
	if(var bell_step == int 2) {
			if(var bell_anim_frame == int 15) {
					var bell_step ++ 
			}
	}

	// ending step, the current ring animation is stopped
	if(var bell_step == int 3) {
			if(var bell_anim_frame == int 1) {
					var bell_step = int 0
					var is_bell_ring_animation_played = int 0
					gamevar global_zone_type = int 0
			}
	}

	// play the bell ringing sound when the hammer hits the bell (frame 15)
	if(var is_bell_ring_animation_played == int 1 && var bell_anim_frame == int 15) {
			call play_loaded_sound(int 1, int 0, int 14, int 0)
	}

._do_nothing

._init_bell_ring_animation
	call load_sound(int 14)
	call load_sound(int 51)
	gamevar SMACKER_X = int 368
	gamevar SMACKER_Y = int 304
	call func_a0(var &VAR_74, int 1, int 1, var &is_bell_ring_animation_played)

._get_chronicler_if_he_already_exist
	if(call ! func_16(int 6291456)) {
			exit_script 
	} else {
			if(var chronicler_char_ref == int 0) {
					var chronicler_char_ref = call get_char_handle(int 6291456)
			}
	}

._handle_chronicler
	if(call ! func_16(int 6291456)) {
			exit_script 
	} else {
			if(var chronicler_char_ref == int 0) {
					var chronicler_char_ref = call get_char_handle(int 6291456)
			}
	}
	if(var VAR_23 != var VAR_17) {
			var VAR_23 = var VAR_17
			call func_ce(var VAR_17)
	}
	switch(var VAR_17) {
			case 0
				if(gamevar chronicler_variation != int -1) {
						execute speak_with_chronicler
				}
				gamevar script_object = var chronicler_char_ref
				var VAR_20 = gamevar *character_movement_p+3
				var VAR_21 = gamevar *character_movement_p+4
				var VAR_22 = gamevar *character_movement_p+5
				var VAR_3 = int 0
				call func_10c(var chronicler_char_ref, int 0)
				var VAR_17 ++ 
				var VAR_18 = int 0
				break 
			case 1
				if(call func_127(var chronicler_char_ref)) {
						var VAR_19 = gamevar saved_games_count
						var VAR_3 = int 1
						var VAR_17 ++ 
						var VAR_18 = int 0
				}
				break 
			case 2
				if(call get_input_sys() != int 4) {
						call func_111(int 2)
						var VAR_17 ++ 
						var VAR_18 = int 0
				}
				break 
			case 3
				if(var VAR_18 > int 40) {
						call func_12e(var VAR_0)
						var VAR_17 ++ 
						var VAR_18 = int 0
				}
				break 
			case 4
				if(var VAR_18 > int 10) {
						if(gamevar !current_menu_level_p)
						{
								var VAR_17 ++ 
								var VAR_18 = int 0
						}
				}
				break 
			case 5
				if(var VAR_19 != gamevar saved_games_count) {
						call func_cd(var &VAR_24)
						call func_11d()
						var VAR_17 = int 7
						var VAR_18 = int 0
				} else {
						call func_cd(var &VAR_25)
						call func_2a(var chronicler_char_ref, var &VAR_20)
						execute load_chronicler_and_hero_dialog
						gamevar chronicler_variation = var chronicler_dialog
						var VAR_17 ++ 
						var VAR_18 = int 0
				}
				break 
			case 6
				if(var VAR_18 > int 30) {
						call func_111(int 1)
						gamevar clicked_character = int 0
						var VAR_3 = int 0
						var VAR_17 = int 1
						var VAR_18 = int 0
				}
				break 
			case 7
				if(var VAR_18 > int 40) {
						call func_f6(gamevar char_gen_fx_scripts, int 8, int 0, var chronicler_char_ref)
						execute load_chronicler_and_hero_dialog
						gamevar chronicler_variation = var chronicler_dialog
						var VAR_17 ++ 
						var VAR_18 = int 0
				}
				break 
			case 8
				if(var VAR_18 > int 100)
				{
						call remove_char(var chronicler_char_ref)
						call func_111(int 1)
						var VAR_3 = int 0
						var VAR_17 ++ 
						var VAR_18 = int 0
				}
				break 
	}
	var VAR_18 ++ 

._get_chronicler_if_he_exists
	// check if chronicler character exist
	if(call func_16(int 6291456))
	{
			if(var chronicler_char_ref == int 0) {
					var chronicler_char_ref = call get_char_handle(int 6291456)
			}
			call func_34(var chronicler_char_ref)
	}

._speak_with_chronicler
	var VAR_4 = call func_66(gamevar control_char_p)
	switch(var VAR_4) {
			case 65536
				call func_10d(var &VAR_5, var &VAR_6, gamevar chronicler_variation)
				break 
			case 786432
				call func_10d(var &VAR_7, var &VAR_8, gamevar chronicler_variation)
				break 
			case 262144
				call func_10d(var &VAR_9, var &VAR_10, gamevar chronicler_variation)
				break 
			case 327680
				call func_10d(var &VAR_11, var &VAR_12, gamevar chronicler_variation)
				break 
			case 131072
				call func_10d(var &VAR_13, var &VAR_14, gamevar chronicler_variation)
				break 
			case 196608
				call func_10d(var &VAR_15, var &VAR_16, gamevar chronicler_variation)
				break 
	}

._load_chronicler_and_hero_dialog
	// get pointer to selected hero character
	var selected_char = call func_66(gamevar control_char_p)
	switch(var selected_char) {
			case 65536
				var chronicler_dialog = call func_6e(var &VAR_27, var &VAR_28)
				break 
			case 786432
				var chronicler_dialog = call func_6e(var &VAR_29, var &VAR_30)
				break 
			case 262144
				var chronicler_dialog = call func_6e(var &VAR_31, var &VAR_32)
				break 
			case 327680
				var chronicler_dialog = call func_6e(var &VAR_33, var &VAR_34)
				break 
			case 131072
				var chronicler_dialog = call func_6e(var &VAR_35, var &VAR_36)
				break 
			case 196608
				var chronicler_dialog = call func_6e(var &VAR_37, var &VAR_38)
				break 
	}

._create_rain_fx
	call load_sound(int 25)

	// play sound of rain on repeat ("rain2")
	call play_loaded_sound(int 1, int -1, int 25, int 0)

	// play sound of thunder on repeat ("thunroll")
	var VAR_41 = call play_loaded_sound(int 3, int -1, int 25, int 0)

	var VAR_40 = int 70
	call func_11c(var VAR_41, var VAR_40)

	var rain_sfx_initialized = int 1

._play_lightning_thunder_effects
	if(var !rain_sfx_initialized) {
			call func_cd(var &VAR_47)
			exit_script 
	}
	switch(var VAR_43) {
			case 0
				if(var VAR_42) {
						var VAR_45 = int 1
						var VAR_43 ++ 
						var VAR_44 = int 0
				}
				break 
			case 1
				if(var VAR_40 < int 200) {
						var VAR_46 = var VAR_44 % int 2
						if(var VAR_46 == int 0)
						{
								var VAR_40 += var VAR_45
								call func_11c(var VAR_41, var VAR_40)
						}
				} else {
						var VAR_43 ++ 
						var VAR_44 = int 0
				}
				break 
			case 2
				if(var VAR_44 > int 150) {
						var VAR_43 ++ 
						var VAR_44 = int 0
				}
				break 
			case 3
				if(var VAR_40 > int 70) {
						var VAR_46 = var VAR_44 % int 2
						if(var VAR_46) {
								var VAR_40 -= var VAR_45
								call func_11c(var VAR_41, var VAR_40)
						}
				} else {
						var VAR_42 = int 0
						var VAR_43 = int 0
						var VAR_44 = int 0
				}
				break 
	}
	execute play_thunder_sfx
	execute play_thunder_vfx
	var VAR_44 ++ 

._play_thunder_sfx
	switch(var VAR_48) {
			case 0
				var VAR_49 = int 0
				var VAR_50 = call randomize_int(int 1200, int 1801)
				var VAR_48 ++ 
				break 
			case 1
				if(var VAR_49 > var VAR_50) {
					 	// play thunder sound "thunrumb"
						var VAR_51 = call play_loaded_sound(int 4, int 0, int 25, int 0)
						
						call func_11c(var VAR_51, call randomize_int(int 100, int 201))
						call func_11a(var VAR_51, call randomize_int(int 0, int 128))
						if(var !VAR_42)
						{
								var VAR_42 = int 1
						}
						var VAR_48 ++ 
						var VAR_49 = int 0
				}
				break 
			case 2
				if(var VAR_49 > int 200) {
						var VAR_48 = int 0
						var VAR_49 = int 0
				}
				break 
	}
	var VAR_49 ++ 

._play_thunder_vfx
	switch(var VAR_52) {
			case 0
				if(gamevar scene_counter > int 600) {
						var VAR_52 ++ 
				}
				break 
			case 1
				var VAR_53 = int 0
                // reset timer
				call func_d5()
				var VAR_55 = call randomize_int(int 400, int 601)
				var VAR_52 ++ 
				break 
			case 2
				if(call func_129(var VAR_55)) {
						call func_f6(gamevar misc_fx_scripts, int 6, int 0, int 0)
                        // reset timer
						call func_d5()
						var VAR_56 = int 255
						var VAR_55 = call randomize_int(int 1, int 31)
						var VAR_53 = int 0
						var VAR_52 ++ 
				}
				break 
			case 3
				if(call func_129(var VAR_55)) {
						var VAR_56 -= int 4 * var VAR_55
					 	// play thunder sound "thunstrk"
						var VAR_54 = call play_loaded_sound(int 5, int 0, int 25, int 0)

						call func_11c(var VAR_54, var VAR_56)
						var VAR_55 = int 255 - var VAR_56
						var VAR_53 = int 0
						var VAR_52 ++ 
				}
				break 
			case 4
				if(var VAR_53 > var VAR_55) {
					 	// play thunder sound "thunrumb"
						var VAR_54 = call play_loaded_sound(int 4, int 0, int 25, int 0)

						call func_11c(var VAR_54, var VAR_56)
						if(var ! VAR_42)
						{
								var VAR_42 = int 1
						}
						var VAR_52 ++ 
						var VAR_53 = int 0
				}
				break 
			case 5
				if(var VAR_53 > int 100) {
						var VAR_52 = int 1
						var VAR_53 = int 0
				}
				break 
	}
	var VAR_53 ++ 
